using HRM_ROHTO.Models.BUS;
using HRM_ROHTO.Util;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace HRM_ROHTO.Controllers
{
    public class ReportSummaryByEmployeeController : BaseController
    {
        //
        // GET: /ReportSummaryByEmployee/
        static DataTable dtToExcel;
        public ActionResult Index(DateTime? FromDate, DateTime? ToDate)
        {
            if (!CheckPermission("ReportSummaryByEmployee", 1))
                return RedirectToAction("Login", "Login", "Login");
            DateTime f = DateTime.Now;
            DateTime t = DateTime.Now;
            if (!FromDate.HasValue)
            {
                FromDate = f;
            }
            if (!ToDate.HasValue)
            {
                ToDate = t;
            }
            ViewBag.FromDate = f.ToString("yyyy-MM-dd");
            ViewBag.ToDate = t.ToString("yyyy-MM-dd");

            List<SqlParameter> lstParam = new List<SqlParameter>();

            lstParam.Add(new SqlParameter("@fromdate", FromDate));
            lstParam.Add(new SqlParameter("@todate", ToDate));

            //  ViewBag.store = DA_ScheduleMenu.Instance.Exec("pr_ReportMealCardByDay", lstParam.ToArray());
            // DateTime FromDate = getFromDateFromNow();
            // ViewBag.FromDate = FromDate.ToString("yyyy-MM-dd");
            var result_store = DA_ScheduleMenu.Instance.Exec("pr_ReportRegisterByEmployee", lstParam.ToArray());
            dtToExcel = pr_SummarybyEmployee(FromDate, ToDate);

            //lưu trữ dữ liệu datatable
            List<object> result_list = new List<object>();
            //lưu trữ tổng các ca và tổng
            List<long> tong = new List<long>();
            List<DataRow> result_current = new List<DataRow>();
            DateTime date_before = new DateTime();
            long sum_ca0 = 0;
            long sum_ca1 = 0;
            long sum_ca2 = 0;
            long sum_ca3 = 0;
            long sum_ca01 = 0;
            long sum_ca11 = 0;
            long sum = 0;
            for (int i = 0; i < result_store.Rows.Count; i++)
            {
                DateTime date_current = Convert.ToDateTime(result_store.Rows[i][0].ToString());
                int result_compare = DateTime.Compare(date_before, date_current);

                //nếu nó là đầu vòng lặp hoặc nó nó là đầu group ngày
                if (i == 0 || result_compare != 0)
                {
                    date_before = date_current;
                    if (result_compare != 0 && i != 0)
                    {
                        result_list.Add(result_current);
                        result_current = new List<DataRow>();
                    }
                    result_current.Add(result_store.Rows[i]);
                }
                //nếu nó nằm ở giữa vòng lặp group
                else
                {
                    result_current.Add(result_store.Rows[i]);
                }

                //nếu nó nằm ở cuối vòng lặp
                if (i == result_store.Rows.Count - 1)
                {
                    result_list.Add(result_current);
                }

                //tính tổng các ca và tổng 
                sum_ca0 = string.IsNullOrWhiteSpace(result_store.Rows[i]["Ca0"].ToString())? sum_ca0 : ++sum_ca0;
                sum_ca1 = string.IsNullOrWhiteSpace(result_store.Rows[i]["Ca1"].ToString()) ? sum_ca1 : ++sum_ca1;
                sum_ca2 = string.IsNullOrWhiteSpace(result_store.Rows[i]["Ca2"].ToString()) ? sum_ca2 : ++sum_ca2;
                sum_ca3 = string.IsNullOrWhiteSpace(result_store.Rows[i]["Ca3"].ToString()) ? sum_ca3 : ++sum_ca3;
                sum_ca01 = string.IsNullOrWhiteSpace(result_store.Rows[i]["Ca0Plus"].ToString()) ? sum_ca01 : ++sum_ca01;
                sum_ca11 = string.IsNullOrWhiteSpace(result_store.Rows[i]["Ca1Plus"].ToString()) ? sum_ca11 : ++sum_ca11;
                sum += Convert.ToInt64(result_store.Rows[i]["Total"]);
            }

            //set giá trị cho tổng
            tong.Add(sum_ca0);
            tong.Add(sum_ca1);
            tong.Add(sum_ca2);
            tong.Add(sum_ca3);
            tong.Add(sum_ca01);
            tong.Add(sum_ca11);
            tong.Add(sum);

            //int sum = 0;
            //for (int i = 0; i < dtToExcel.Rows.Count; i++)
            //{
            //    sum = sum + (int)dtToExcel.Rows[i]["Quantity"];
            //}
            //gán giá trị cho viewbag
            ViewBag.store = result_list;
            ViewBag.Tong = tong;

            return View();

        }

        public DataTable pr_SummarybyEmployee(DateTime? FromDate, DateTime? ToDate)
        {
            Database db1 = new Database();
            db1.fn_GetData_Pro("pr_ReportSummaryByEmployee", new SqlParameter("@fromdate", FromDate),
                                                           new SqlParameter("@todate", ToDate));
            DataTable dt1 = db1.mn_Table;
            return dt1;
        }

        [HttpPost]
        public JsonResult ExportMealCard(FormCollection fc)
        {

            // dtToExcel = pr_GetListMealToomorrow(day, Month, Year);
            using (ExcelPackage pck = new ExcelPackage())
            {
                var wsList = pck.Workbook.Worksheets.Add("Báo cáo");

                wsList.Cells["A1"].LoadFromText("Thống kê phần cơm theo nhân viên");

                // string strngay = "Từ : " + FromDate.ToString("dd/MM/yyyy HH:mm:ss") + " - Đến : " + ToDate.ToString("dd/MM/yyyy HH:mm:ss");
                Random rand = new Random();
                // int randomvalue = rand.Next(1000, 9999);
                string namefile = "Bao_Cao_Theo_NV";
                // wsList.Cells["A2"].LoadFromText(strngay);
                int ncot = dtToExcel.Columns.Count;
                int ndong = dtToExcel.Rows.Count;

                int sum = 0;
                for (int i = 0; i < dtToExcel.Rows.Count; i++)
                {
                    sum = sum + (int)dtToExcel.Rows[i]["Quantity"];
                }

              
                DataTable dt2 = new DataTable();
                System.Data.DataView view = new System.Data.DataView(dtToExcel);
                dt2 = view.ToTable(false, "Fullname", "EmployeeCode", "CardNumber", "ContractNo", "Quantity");

                //dong tong cong

                wsList.Cells[ndong+4,2].LoadFromText("Tổng cộng");
                //wsList.Cells[ndong, 1, ndong, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //wsList.Cells[ndong, 1, ndong, 4].Style.Font.Size = 11;

                wsList.Cells[ndong+4, 5].LoadFromText(sum.ToString());
                wsList.Cells[ndong+4, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                wsList.Cells[ndong+4, 5].Style.Font.Size = 11;

                dt2.Columns["Fullname"].ColumnName = "Họ tên";
                dt2.Columns["EmployeeCode"].ColumnName = "Mã nhân viên";
                dt2.Columns["CardNumber"].ColumnName = "Mã số thẻ";
                dt2.Columns["ContractNo"].ColumnName = "Số hợp đồng";
                dt2.Columns["Quantity"].ColumnName = "Số lượng";
                wsList.Cells["A3"].LoadFromDataTable(dt2, true, TableStyles.Light20);
                wsList.Cells[wsList.Dimension.Address].AutoFitColumns();

                wsList.Cells[1, 1, 1, ncot - 1].Merge = true;
                wsList.Cells[1, 1, 1, ncot - 1].Style.Font.Bold = true;
                wsList.Cells[1, 1, 1, ncot - 1].Style.Font.Size = 16;
                wsList.Cells[1, 1, 1, ncot - 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                wsList.Cells[2, 1, 2, ncot - 1].Merge = true;
                wsList.Cells[2, 1, 2, ncot - 1].Style.Font.Size = 12;
                wsList.Cells[2, 1, 2, ncot - 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                wsList.Cells[3, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
              
                wsList.Column(1).Width = 20;
                wsList.Column(2).Width = 50;
                wsList.Column(3).Width = 50;
                wsList.Column(4).Width = 20;
                wsList.Column(5).Width = 20;

                wsList.Column(2).Style.WrapText = true;
                wsList.Column(3).Style.WrapText = true;
                wsList.Column(5).Style.Numberformat.Format = "#,##0";
                wsList.Column(4).Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                wsList.Column(5).Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                wsList.Row(3).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                string path = Server.MapPath("/TK_SoLuongPhanComTheoNhanVien.xlsx");
                Stream stream = System.IO.File.Create(path);
                pck.SaveAs(stream);
                stream.Close();
                return Json("/TK_SoLuongPhanComTheoNhanVien.xlsx");
            }

        }
    }
}
